#! /bin/sh -
#
# Copyright (C) 2019-2024 Stealth Software Technologies, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an "AS
# IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language
# governing permissions and limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#
# This script uses the SST Bash library to bootstrap from /bin/sh into
# bash. See the Bash library > Bootstrapping section of the SST manual
# for more information.
#

#-----------------------------------------------------------------------
# Load the prelude
#-----------------------------------------------------------------------

set -e || exit $?
. bash/sst.bash

#-----------------------------------------------------------------------

carma_test_rib_inner() {

  declare arg
  declare delay_execute
  declare delay_start
  declare deployment_name
  declare got
  declare opt
  declare parse_options
  declare pop
  declare run_time
  declare sleep_time_regex
  declare ta1_custom_args
  declare -a ta1_plugins
  declare -a ta2_channels

  sleep_time_regex='^(0|[1-9][0-9]{0,8})$'
  readonly sleep_time_regex

  delay_execute=300
  delay_start=0
  run_time=300
  ta1_custom_args=
  ta1_plugins=()
  ta2_channels=()

  parse_options=1
  set x "$@"
  while shift && (($# > 0)); do

    if ((parse_options)); then

      #-----------------------------------------------------------------
      # Options terminator
      #-----------------------------------------------------------------

      sst_parse_opt -- forbidden : "$@"
      eval "$pop"
      if ((got)); then
        parse_options=
        readonly parse_options
        continue
      fi

      #-----------------------------------------------------------------
      # --delay-execute
      #-----------------------------------------------------------------

      sst_parse_opt --delay-execute : "$@"
      eval "$pop"
      if ((got)); then
        delay_execute=$arg
        continue
      fi

      #-----------------------------------------------------------------
      # --delay-start
      #-----------------------------------------------------------------

      sst_parse_opt --delay-start : "$@"
      eval "$pop"
      if ((got)); then
        delay_start=$arg
        continue
      fi

      #-----------------------------------------------------------------
      # --help
      #-----------------------------------------------------------------

      sst_parse_opt --help forbidden : "$@"
      eval "$pop"
      if ((got)); then
        sst_ihs <<<"
          Usage: carma test rib [--ta1-plugin=<name>]...
                                [--ta2-channel=<name>]...

          If no --ta1-plugin options are given, the default is
          --ta1-plugin=carma:r@ARTIFACTORY_REVISION@:dev.

          If no --ta2-channel options are given, the default is
          --ta2-channel=twoSixDirectCpp --ta2-channel=twoSixIndirectCpp.
        "
        exit 0
      fi

      #-----------------------------------------------------------------
      # --run-time
      #-----------------------------------------------------------------

      sst_parse_opt --run-time : "$@"
      eval "$pop"
      if ((got)); then
        run_time=$arg
        continue
      fi

      #-----------------------------------------------------------------
      # --ta1-custom-args
      #-----------------------------------------------------------------

      sst_parse_opt --ta1-custom-args : "$@"
      eval "$pop"
      if ((got)); then
        ta1_custom_args=$arg
        continue
      fi

      #-----------------------------------------------------------------
      # --ta1-plugin
      #-----------------------------------------------------------------

      sst_parse_opt --ta1-plugin : "$@"
      eval "$pop"
      if ((got)); then
        arg=${arg//'{@}AT{@}ARTIFACTORY_REVISION{@}AT{@}'/'@ARTIFACTORY_REVISION@'}
        ta1_plugins+=("$arg")
        continue
      fi

      #-----------------------------------------------------------------
      # --ta2-channel
      #-----------------------------------------------------------------

      sst_parse_opt --ta2-channel : "$@"
      eval "$pop"
      if ((got)); then
        ta2_channels+=("$arg")
        continue
      fi

      #-----------------------------------------------------------------
      # Unknown options
      #-----------------------------------------------------------------

      sst_unknown_opt "$1"

      #-----------------------------------------------------------------

    fi

    sst_barf "Operands are forbidden: $1"

  done
  readonly parse_options

  if [[ ! "$delay_execute" =~ $sleep_time_regex ]]; then
    delay_execute=$(sst_smart_quote "$delay_execute")
    sst_barf "Invalid --delay-execute value: $delay_execute"
  fi
  readonly delay_execute

  if [[ ! "$delay_start" =~ $sleep_time_regex ]]; then
    delay_start=$(sst_smart_quote "$delay_start")
    sst_barf "Invalid --delay-start value: $delay_start"
  fi
  readonly delay_start

  if [[ ! "$run_time" =~ $sleep_time_regex ]]; then
    run_time=$(sst_smart_quote "$run_time")
    sst_barf "Invalid --run-time value: $run_time"
  fi
  readonly run_time

  readonly ta1_custom_args

  if ((${#ta1_plugins[@]} == 0)); then
    ta1_plugins+=(carma:r@ARTIFACTORY_REVISION@:dev)
  fi
  for ((i = 0; i < ${#ta1_plugins[@]}; ++i)); do
    ta1_plugins[i]=--ta1-plugin=$(sst_smart_quote "${ta1_plugins[i]}")
  done
  readonly ta1_plugins

  if ((${#ta2_channels[@]} == 0)); then
    ta2_channels+=(twoSixDirectCpp)
    ta2_channels+=(twoSixIndirectCpp)
  fi
  for ((i = 0; i < ${#ta2_channels[@]}; ++i)); do
    ta2_channels[i]=--ta2-channel=$(sst_smart_quote "${ta2_channels[i]}")
  done
  readonly ta2_channels

  rib docker login
  rib jfrog config

  deployment_name=x$(date +%s)
  readonly deployment_name

  # TODO: Use these options too:
  #    --linux-client-uninstalled-count=1
  #    --ta2-channel=twoSixBootstrapCpp

  eval '
    rib deployment local create \
      --name=$deployment_name \
      --linux-server-count=15 \
      --linux-client-count=3 \
      --race=@RACE_VERSION@ \
      --linux-client-uninstalled-count=1 \
      --ta2-channel=twoSixBootstrapCpp \
      '"${ta1_plugins[@]}"' \
      '"${ta2_channels[@]}"' \
    ;
  '

  if [[ "$ta1_custom_args" ]]; then
    rib deployment local config generate \
      --force \
      --name=$deployment_name \
      --ta1-custom-args="${ta1_custom_args}" \
    ;
    rib deployment local up \
      --name=$deployment_name \
    ;
    rib deployment local start \
      --name=$deployment_name \
    ;
  fi

  jq '
    .["test-config"]["run-time"] = '"$run_time"'
  ' </code/test-plan.json >"$sst_tmpdir"/test-plan.json

  rib deployment local test integrated \
    ${ta1_custom_args:+--running} \
    --delay-execute="$delay_execute" \
    --delay-start="$delay_start" \
    --name=$deployment_name \
    --raise-on-fail \
    --run-time="$run_time" \
    --test-plan="$sst_tmpdir"/test-plan.json \
  ;

}; readonly -f carma_test_rib_inner

carma_test_rib_inner "$@"
