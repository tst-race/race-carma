//
// Copyright (C) 2019-2024 Stealth Software Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an "AS
// IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language
// governing permissions and limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//

#ifndef KESTREL_ZULIP_PLUGIN_T_HPP
#define KESTREL_ZULIP_PLUGIN_T_HPP

#include <cstddef>
#include <memory>
#include <thread>

#include <IRaceSdkComms.h>
#include <PluginConfig.h>

#include <kestrel/basic_config_t.hpp>
#include <kestrel/channel_id_t.hpp>
#include <kestrel/easy_ta2_plugin_t.hpp>
#include <kestrel/race_handle_t.hpp>
#include <kestrel/tracing_event_t.hpp>

namespace kestrel {
namespace zulip {

class plugin_t : public easy_ta2_plugin_t<basic_config_t> {

  //--------------------------------------------------------------------
  // Default operations
  //--------------------------------------------------------------------

public:

  explicit plugin_t(IRaceSdkComms & sdk);
  plugin_t(plugin_t const &) = delete;
  plugin_t & operator=(plugin_t const &) = delete;
  plugin_t(plugin_t &&) = delete;
  plugin_t & operator=(plugin_t &&) = delete;
  virtual ~plugin_t() noexcept = default;

  //--------------------------------------------------------------------
  // inner_init
  //--------------------------------------------------------------------

public:

  void inner_init(tracing_event_t tev,
                  PluginConfig const & pluginConfig) final;

  //--------------------------------------------------------------------
  // inner_shutdown
  //--------------------------------------------------------------------

public:

  void inner_shutdown(tracing_event_t tev) noexcept final;

  //--------------------------------------------------------------------
  // thread_
  //--------------------------------------------------------------------

private:

  std::unique_ptr<std::thread> thread_;

  //--------------------------------------------------------------------
  // thread_func
  //--------------------------------------------------------------------

private:

  void thread_func() {
  }

  //--------------------------------------------------------------------
};

} // namespace zulip
} // namespace kestrel

#endif // #ifndef KESTREL_ZULIP_PLUGIN_T_HPP
